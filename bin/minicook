#!/usr/bin/ruby1.8 -w

=begin

  ############################################################
  @author:    Riccardo Carlesso
  @email:     riccardo.carlesso@gmail.com
  @maturity:  development
  @language:  Ruby
  @synopsis:  Brief Description here
  @tags:      development, rcarlesso, test
  @description: See description 
 ############################################################

=end

  require 'optparse'       # http://ruby.about.com/od/advancedruby/a/optionparser.htm
  require 'yaml'
  require 'facter'
  
  require ENV['SAKURADIR'] + '/lib/ric.rb'

  # Program constants, automagically picked up by RicLib
  # More configuration could be written in:
  #    $SVNHOME/etc/ricsvn/<FILENAME>.yml
  # That would go into the variable '$prog_conf_d'
  $myconf = {
    :app_name            => "minicook",
    :description         => "This is a minimal configuration manager for Linux, inspired by Chef and Puppet.
Tries to be more agile, to Get things Done (TM)",
    :recipes_dir         => ENV['SAKURADIR'] + '/lib/recipes/',
    :available_commands  => %w{apply help list} ,
  }

  $PROG_VER = '0.1.1'
  $DEBUG    = false

  def usage(comment=nil)
    puts $optparse.banner
    puts $optparse.summarize
    pred comment if comment
    puts "Description: #{ $myconf[:description] }"
    exit 11
  end

class Recipe
  def initialize(file)
    @yaml = YAML.load_file(file)
    puts "Initializing CookBook module #{yellow @yaml['name']}"
    validate
  end


  def prerequisites
    deb @yaml['prerequisites'].inspect
    # verify FACTER 

    # verify HERE

    # verify MODULES
  end


  def valid?
    try
	validate
	true
    catch
	false
    end 
  end


  def execute

  end

  def test

  end

  def validate()
    

  end


end

# include it in main if you want a custome one
def init()    # see lib_autoinit in lib/util.rb
  $opts = {}
  $opts[:recipes_dir] = $myconf[:recipes_dir]
  $optparse = OptionParser.new do |opts|
    opts.banner = "#{$0} v.#{$PROG_VER}\n Usage: #{File.basename $0} [directive] [...]\nDirectives are: #{ $myconf[:available_commands].join(',') }" 
    opts.on( '-d', '--debug', 'enables debug (DFLT=false)' )  {  $opts[:debug] = true ; $DEBUG = true }
    opts.on( '-h', '--help', 'Display this screen' )          {  puts(opts); exit 1 }
    opts.on( '-n', '--dryrun', "Don't really execute code" ) { $opts[:dryrun] = true }
    opts.on( '-l', '--recipes-dir DIR', 'Recipes dir from DIR (dflt:)' )    {|dir| $opts[:recipes_dir] = dir }
    opts.on( '-v', '--verbose', 'Output more information' )   { $opts[:verbose] = true}
  end
  $optparse.parse!  
end

def list(dir)
  files = Dir.glob("#{dir}/*.recipe")
  puts files.join("\n")
  files
end

def apply(filename)
   puts("apply: #{azure filename}")
   recipe = Recipe.new(filename)
   # prerequisites
   pwhite "1. Prerequisites"
   puts recipe.prerequisites
   pwhite "2. INSTALL: TODO"
   pwhite "3. POST"
end

  def real_program
    debug_on 'Just created script, presuming u need some debug. TODO REMOVE ME when everything works!' if $DEBUG
      # Maybe you may want to check on ARGV
    # unless ARGV.size == 2
    #   usage "Give me 2 arguments!" 
    # end
    deb("Hello world from a templated '#{yellow $0 }'")
    deb "+ Options are:  #{gray $opts}"
    deb "+ Depured args: #{azure ARGV}"
    deb "+ Your configuration: #{purple $myconf.inspect}"
    directive = ARGV[0]
    case directive
      #when 1..5
      #  puts "Its between 1 and 5"
      when 'apply'
        apply(ARGV[1])
      when ''
      when nil
        usage('give me at least one argument!')
      when 'help'
        usage
      when 'list'
        list($opts[:recipes_dir])
      else
        puts "You gave me unknown directive ('#{directive}') -- I have no idea what to do with that."
        exit 1
    end
  end

  def main()
    init
    real_program 
  end

main
