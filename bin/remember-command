#!/usr/bin/env ruby

=begin

  ############################################################
  @author:    Riccardo Carlesso
  @email:     riccardo.carlesso@gmail.com
  @maturity:  development
  @language:  Ruby
  @synopsis:  [Brief Description here]
  @tags:      development, rcarlesso, test
  @description:
   This script tries to remember what you just did on the CLI 
   for future use. It does it by recording on a directory
 ############################################################

=end

  require 'optparse'       # http://ruby.about.com/od/advancedruby/a/optionparser.htm
  require 'socket'  

  # Program constants, automagically picked up by RicLib
  # More configuration could be written in:
  #    $SVNHOME/etc/ricsvn/<FILENAME>.yml
  # That would go into the variable '$prog_conf_d'
  $myconf = {
    :app_name            => 'remember',
    :remember_dir        => '~/remember',
  }

  $PROG_VER = '0.9.1'
  $DEBUG    = false

  def usage(comment=nil)
    puts "#{$0} v.#{$PROG_VER}"
    puts "Usage: #{File.basename $0} [-dhjv] [-l LOGFILE] <COMMAND> <TO> <ISSUE>"
    puts comment if comment
    #exit 11
  end

# def init()    # see lib_autoinit in lib/util.rb
#   $opts = {}
#   optparse = OptionParser.new do |opts|
#     opts.banner = "#{$0} v.#{$PROG_VER}\n Usage: #{File.basename $0} [options] file1 file2 ..."
#     opts.on( '-d', '--debug', 'enables debug (DFLT=false)' )  {  $opts[:debug] = true  }
#     opts.on( '-h', '--help', 'Display this screen' )          {  puts(opts); exit 1 }
#     opts.on( '-j', '--jabba', 'Activates my Jabber powerful CLI' ) {  $opts[:jabba] = true  }
#     opts.on( '-l', '--logfile FILE', 'Write log to FILE' )    {|file| $opts[:logfile] = file }
#     opts.on( '-v', '--verbose', 'Output more information' )   { $opts[:verbose] = true}
#   end
#   optparse.parse!  
# end

  def real_program
    debug_on 'Just created script, presuming u need some debug. TODO REMOVE ME when everything works!' if $DEBUG
      # Maybe you may want to check on ARGV
    path = File.expand_path($myconf[:remember_dir])
    path = File.expand_path(ENV['SVNHOME'] + "/var/remember/" ) if ENV['SVNHOME']
    logfile =path +"/"+Socket.gethostname
    unless ARGV.size > 0
      usage "Give me at least 1 argument!"
      puts "\nTry: cat '#{logfile}'\n\n"
      puts `cat '#{logfile}'`
      exit 1
    end
    # Your code goes here...
    puts `mkdir -p '#{path}'`
    commands= ARGV.join ' '
    File.open(logfile, 'a') do |f|
      f.write "#{Time.now} [#{ENV['USER']}] #{commands}\n" 
    end
    puts "#Remembering: '''#{commands}'''"
    system(commands)
  end

  def main()
    real_program 
  end

  main()
